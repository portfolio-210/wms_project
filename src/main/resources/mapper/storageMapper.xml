<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="wms_project.mapper.StorageMapper">

    <!-- 등록 -->
    <insert id="insert1" parameterType="wms_project.dto.StorageDTO">
        INSERT INTO storage (scode, sspot, sname, spost, saddress1, saddress2, smname, smhp, suse, mid, sdeleted, sdate)
        VALUES (#{scode}, #{sspot}, #{sname}, #{spost}, #{saddress1}, #{saddress2}, #{smname}, #{smhp}, #{suse}, #{mid},
                #{sdeleted}, NOW())
    </insert>

    <!-- 중복체크(창고코드) -->
    <select id="checkCode" resultType="int">
        SELECT COUNT(*)
        FROM storage
        WHERE scode = #{scode}
    </select>

    <select id="searchall" parameterType="Map" resultType="wms_project.dto.StorageDTO">
        select *
        from storage
        where sspot = #{mspot}	
        <if test="startno !='' and startno != null and endno !='' and endno !=''">
		LIMIT #{startno}, #{endno}
		</if>
    </select>
    <!-- 사용중인 창고만 표출하게 하는 sql -->
     <select id="searchalluse" parameterType="Map" resultType="wms_project.dto.StorageDTO">
        select *
        from storage
        where sspot = #{mspot}
        and suse = 1	
    </select>
    
    <select id="storageTotal" parameterType="Map" resultType="Integer" >
    	
    	select count(*)
    	from storage
    	where sspot = #{mspot}
    	<if test="search != '' and search != null ">
    	AND sname LIKE CONCAT('%', #{search}, '%')
    	</if>
    
    </select>
    
    <select id="searchto" parameterType="String" resultType="wms_project.dto.StorageDTO">
        select *
        from storage
		where scode != #{selectstorage}
		and suse = 1	
    </select>
    
	<select id="all" parameterType="Map" resultType="wms_project.dto.StorageDTO">
		select * from storage where sspot = #{mspot} AND sname LIKE CONCAT('%', #{search}, '%')
		LIMIT #{startno}, #{endno}               
	</select>


    <select id="getByID" parameterType="String" resultType="wms_project.dto.StorageDTO">
        select *
        from storage
        where scode = #{scode}
    </select>

    <update id="updateByID" parameterType="wms_project.dto.StorageDTO">
      update storage
      set
          sname = #{sname},
          spost = #{spost},
          saddress1 = #{saddress1},
          saddress2 = #{saddress2},
          smname = #{smname},
          smhp = #{smhp},
          suse = #{suse}
      where scode = #{scode}
    </update>
    
     <update id="deleteByID" parameterType="wms_project.dto.StorageDTO">
      update storage
      set sdeleted = 0
      where scode = #{scode}
    </update>
    
   <!-- 상품 입고 관련 spl문 -->
   
    <!-- 거래처 입력 시 거래처 코드 자동기입하기 위해 필요 -->
    <select id="getAcode" parameterType="String" resultType="String">
    SELECT acode
    FROM account
    WHERE acompany = #{acompany}
	</select>
				
    <!-- 상품 입고 -->
    <insert id="insertStore" parameterType="Map">
    INSERT INTO product (acompany, acode, pdcode, mspot, pdname, pdamount, sname, scode, pname, pcode, pddate)
    VALUES (#{acompany}, #{acode}, #{pdcode}, #{mspot}, #{pdname}, #{pdamount}, #{sname}, #{scode}, #{pname}, #{pcode}, #{pddate})
    ON DUPLICATE KEY UPDATE
    pdamount = pdamount + VALUES(pdamount),
    pddate = VALUES(pddate);    	    
    </insert>
    
    <select id="productlist" parameterType="Map" resultType="Map">
    SELECT *
    FROM product
    <choose>
     <when test="selectstorage !='' and storageto != null">
     WHERE scode = #{storageto} 
     </when>
    </choose>        
    </select>
    
    <!-- 사용자가 선택한 창고의 리스트 갯수 -->
    <select id="productlistotal" parameterType="Map" resultType="Integer">
    SELECT count(*)
    FROM product
    WHERE scode = #{selectstorage}           
    </select>
    
    <!-- 상품 출고 -->
    <update id="updateProduct" parameterType="Map">
        UPDATE product
        SET pdamount = pdamount - #{quantity}
        WHERE pdidx = #{pdidx}
    </update>
    <!-- 이동하려는 창고의 mspot값 가져오기  -->
    <select id="searchmspot" parameterType="map" resultType="String">
    	select sspot
    	from storage
    	where scode = #{instorecode}
    </select> 
    <!-- 입고하는 창고에 같은 물건이 없을 때 -->
    <insert id="moveProduct" parameterType="wms_project.dto.ProductDTO">
    	INSERT INTO product (acompany, acode, pdcode, mspot, pdname, pdamount, sname, scode, pname, pcode, pddate)
    	VALUES (#{acompany}, #{acode}, #{pdcode}, #{mspot}, #{pdname}, #{quantity}, #{instorename}, #{instorecode}, '재고파레트', '00000', now())
    </insert>
    <!-- 입고하는 창고에 같은 물건 있을 때 -->
    <update id="updateProduct1" parameterType="wms_project.dto.ProductDTO">
    UPDATE product
    SET pdamount = pdamount + #{quantity}
    WHERE pdcode = #{pdcode} AND scode = #{instorecode}
	</update>
      
    <select id="selectProduct" parameterType="String" resultType="wms_project.dto.ProductDTO">
    SELECT acompany, acode, pdcode, pdname, sname, scode, mspot
    FROM product
    WHERE pdidx = #{pdidx}   
    </select>
    
    <!-- 사용자에 맞는 창고 안에 있는 모든 파레트의 정보 -->   
    <select id="paletteall" resultType="Map">
	SELECT p.pname, p.sname
    FROM product p
    LEFT JOIN palette s ON p.pcode = s.pcode
    WHERE (s.mspot = #{mspot} AND s.pusing = 'Y') OR (p.pname = '재고파레트' AND p.mspot = #{mspot})
    GROUP BY p.pname, p.sname 
    </select>
    
    <!-- 선택되지 않은 모든 파레트의 정보 -->
    <select id="paletteAnother" resultType="Map">
    SELECT p.pname, p.pcode
    FROM palette p
    LEFT OUTER JOIN product pr ON p.pcode = pr.pcode
    WHERE p.mspot = #{mspot} AND p.pname != #{pname} AND p.pusing = 'Y'
    <if test="scode != null and scode != ''">
        AND (pr.sname = #{sname} OR pr.scode IS NULL)
    </if>
    GROUP BY p.pname, p.pcode
    </select>
    
    <select id="paletteSearchall" resultType="Map">
	SELECT * 
	FROM product
	WHERE sname = #{sname} AND pname = #{pname} AND pdamount > 0
	LIMIT #{startno}, #{endno}
    </select>
    
    
    <select id="paletteSearchallCount" resultType="Integer">
	SELECT count(*) 
	FROM product 	
	WHERE sname = #{sname} AND pname = #{pname} AND pdamount > 0
    </select>
    
    
     <!-- 옮기는 팔레트가 기존 팔레트와 이름이 다르며 같은 물건이 없을 때 -->
    <insert id="movePalette" parameterType="wms_project.dto.ProductDTO">
    	INSERT INTO product (acompany, acode, pdcode, pdname, pdamount, sname, scode, pname, pcode, mspot, pddate)
    	VALUES (#{acompany}, #{acode}, #{pdcode}, #{pdname}, #{quantity}, #{sname}, #{scode}, #{instorepalette}, #{pcode}, #{mspot}, now())
    </insert>
    <!-- 입고하는 창고에 같은 물건이 있고 같은 파레트에 있을 때 -->
    <update id="updateProduct2" parameterType="wms_project.dto.ProductDTO">
    UPDATE product
    SET pdamount = pdamount + #{quantity}
    WHERE pdcode = #{pdcode} AND pname = #{instorepalette};
	</update>
	
	
	<select id="palettelist" parameterType="String" resultType="wms_project.dto.PaletteDTO">
        select pidx, pname, pcode, psize, pcolor, pusing 
        from palette 
        where mspot = #{mspot} 
        and pusing = 'Y'
    </select>
    
    <select id="palettecode" parameterType="String" resultType="String">
    	select pcode
    	from palette
    	where pname = #{pname}
    </select>
	
	
    
    
</mapper>
